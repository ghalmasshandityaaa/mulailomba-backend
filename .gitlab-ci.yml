cache:
  key: '$CI_BUILD_REF_NAME node:18.19-alpine'
  paths:
    - node_modules/

stages:
  - build
  - build-container
  - deploy

variables:
  TAG_IMAGE: $CI_COMMIT_BRANCH-$CI_COMMIT_SHA

build-app:
  image: node:18.19-alpine
  stage: build
  before_script:
    - yarn install
  script:
    - yarn build
  artifacts:
    untracked: true
    expire_in: 1 day

docker-build:
  image: docker:latest
  stage: build-container
  dependencies:
    - build-app
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE" --all-tags

deploy-development:
  stage: deploy
  image: gitlab/dind:latest
  environment:
    name: development
  before_script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H $SSH_ADDRESS >> ~/.ssh/known_hosts
  script:
    - printf "DATABASE_URL=${DATABASE_URL}\nPORT=80\n" > .env
    - scp -r ./.env ./docker-compose.dev.yml root@${SSH_ADDRESS}:~/
    - ssh $SSH_USER@$SSH_ADDRESS "docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}; docker-compose -f docker-compose.dev.yml stop; docker-compose -f docker-compose.dev.yml rm web --force; docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest; docker-compose -f docker-compose.dev.yml up -d"#
#
# deploy-production:
#   stage: deploy
#   image: alpine:latest
#   before_script:
#     - 'which ssh-agent || ( apk update && apk add --no-cache openssh )'
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
#     - chmod 700 ~/.ssh/id_rsa
#     - eval "$(ssh-agent -s)"
#     - ssh-add ~/.ssh/id_rsa
#     - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
#   script:
#     - ssh -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_PRODUCTION} "export APP_IMAGE_PROD=$CI_REGISTRY_IMAGE && export APP_IMAGE_PROD_TAG=$TAG_IMAGE && docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY && cd /root/cicd-typescript && git pull && docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
#   environment:
#     name: production
#     url: http://production.2pai-dev.com
#   when: manual
#   only:
#     - master
